<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ORM框架之GreenDao（三）多表关联]]></title>
      <url>http://yoursite.com/2016/05/10/ORM%E6%A1%86%E6%9E%B6%E4%B9%8BGreenDao%EF%BC%88%E4%B8%89%EF%BC%89%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94/</url>
      <content type="html"><![CDATA[<p>GreenDao 中，实体间的关联通过 <code>to-one</code> 和 <code>to-many</code> 来实现。</p>
<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>在 GreenDao 中实现一对一的关联需要讲一个实体类的主键作为另一个实体类的外键。<br>比如一个 <code>Person</code> 有一个 <code>IDCard</code>（身份证），这两者是一一对应的关系，同时，<code>Person</code> 有 <code>name</code>（主键）、<code>sex</code> 和 <code>age</code> 三个属性，<br><code>IDCard</code> 有 <code>CardId</code> 和 <code>CardId</code>（主键） 和 <code>Validity</code> 两个属性。<br>那么可以将 <code>Person</code> 的主键作为 <code>IDCard</code> 的外键，将 <code>IDCard</code> 的主键作为 <code>Person</code> 的外键：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   Entity person = schema.addEntity(<span class="string">"Person"</span>);</span><br><span class="line">   person.addStringProperty(<span class="string">"name"</span>).primaryKey();</span><br><span class="line">person.addStringProperty(<span class="string">"sex"</span>);</span><br><span class="line">person.addLongProperty(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">Entity idCard = schema.addEntity(<span class="string">"IDCard"</span>);</span><br><span class="line">idCard.addLongProperty(<span class="string">"cardId"</span>).primaryKey();</span><br><span class="line">idCard.addLongProperty(<span class="string">"validity"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个实体类通过 Property 来建立关联，此操作会在 person 表中增加一个外键，此外键是 idCard 表中的主键</span></span><br><span class="line">Property personProperty = person.addLongProperty(<span class="string">"cardId"</span>).getProperty();</span><br><span class="line"><span class="comment">// 第一个参数为目标实体类，第二个参数为此表中的外键属性</span></span><br><span class="line">person.addToOne(idCard, personProperty);</span><br><span class="line"></span><br><span class="line">Property idCardProperty = idCard.addStringProperty(<span class="string">"name"</span>).getProperty();</span><br><span class="line">idCard.addToOne(person, idCardProperty);</span><br></pre></td></tr></table></figure>
<p><em>注意：当使用多表关联的时候，就不要添加 id 主键了，因为需要将主键作为其它表的外键来使用</em></p>
<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>比如一个人去购物，会产生很多订单，一个人会有很多订单，但每个订单只能是一个人的，这样就会产生一对多的关联<br>这时需要将 <code>Person</code> 的主键作为 <code>Order</code> 的外键，因为我们可以通过订单找到唯一的 <code>Person</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Entity order = schema.addEntity(<span class="string">"Order"</span>);</span><br><span class="line">order.addLongProperty(<span class="string">"orderId"</span>).primaryKey();</span><br><span class="line">order.addLongProperty(<span class="string">"money"</span>).notNull();</span><br><span class="line"></span><br><span class="line">Property orderProperty = order.addStringProperty(<span class="string">"name"</span>).getProperty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一对多的关联</span></span><br><span class="line"><span class="comment">// 第一个参数为目标实体，第二个参数为目标属性，也就是 person 的主键（order 的外键）,第三个参数为属性名</span></span><br><span class="line">person.addToMany(order, orderProperty, <span class="string">"orders"</span>);</span><br><span class="line"><span class="comment">// 订单对用户为一对一的关联</span></span><br><span class="line">order.addToOne(person, orderProperty);</span><br></pre></td></tr></table></figure>
<p>这样在生成的实体类中 <code>Person</code> 实体中会多出 <code>List&lt;Order&gt; orders</code> 的属性，并且提供了 getOrders()方法来得到用户的所有订单<br><code>Order</code> 实体类中会多出 <code>name</code> 属性，也就是 <code>Person</code> 表的主键，同时也提供了 getPerson()方法来得到该订单对应的用户</p>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>GreenDao 不支持多对多的关系，但是，我们可以通过其它方法来实现。<br>实现多对多关联需要建立一张中间表，其它两张表都要与中间表构建一对多的关联。<br>比如学生与课程之间的连系，一个学生可以选择多种课程，而一个课程可以被多个学生选择</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Entity course = schema.addEntity(<span class="string">"Course"</span>);</span><br><span class="line">course.addLongProperty(<span class="string">"courseId"</span>).primaryKey();</span><br><span class="line">course.addStringProperty(<span class="string">"courseName"</span>).notNull();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间表有其它两个表的主键作为外键</span></span><br><span class="line">Entity personCourse = schema.addEntity(<span class="string">"PersonCourse"</span>);</span><br><span class="line">Property personName = personCourse.addStringProperty(<span class="string">"name"</span>).getProperty();</span><br><span class="line">Property courseId = personCourse.addLongProperty(<span class="string">"courseId"</span>).getProperty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别构建一对多的关联</span></span><br><span class="line">person.addToMany(personCourse, personName);</span><br><span class="line">course.addToMany(personCourse, courseId);</span><br><span class="line"></span><br><span class="line">personCourse.addToOne(person, personName);</span><br><span class="line">personCourse.addToOne(course, courseId);</span><br></pre></td></tr></table></figure>
<p>这样生成的实体类中，<code>Person</code> 和 <code>Course</code> 实体中都会有 <code>List&lt;PersonCourse&gt; personCourseList</code> 属性，<br>再来看一下 <code>PersonCourse</code> 实体类，有 <code>getPerson()</code> 和 <code>getCourse()</code> 方法获得相应的学生和课程。<br>这样，我们通过学生和课程得到 <code>PersonCourse</code> 的集合后，通过这两个方法就可以得到相应的学生或者课程的信息</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ORM框架之GreenDao（二）高级用法]]></title>
      <url>http://yoursite.com/2016/05/10/ORM%E6%A1%86%E6%9E%B6%E4%B9%8BGreenDao%EF%BC%88%E4%BA%8C%EF%BC%89%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li><code>notNull()</code> 约束此属性不可为空</li>
<li>实体类的继承、接口、导包以及序列化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.implementsSerializable(); <span class="comment">// 序列化</span></span><br><span class="line">person.implementsInterface(<span class="string">"com.sivan.A"</span>); <span class="comment">// 实现 A 接口</span></span><br><span class="line">person.setSuperclass(<span class="string">"com.sivan.B"</span>); <span class="comment">// 继承 B 类</span></span><br><span class="line">person.addImport(<span class="string">"com.sivan.C"</span>); <span class="comment">// 导包</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加代码或注释</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entity.setCodeBeforeClass(<span class="string">""</span>) <span class="comment">// 在类前添加代码</span></span><br><span class="line"><span class="comment">// 在 `name` 属性前添加注解</span></span><br><span class="line">entity.addStringProperty(<span class="string">"abstract"</span>).codeBeforeField(<span class="string">"@SerializableName(_abstract)"</span>); </span><br><span class="line"><span class="comment">// 这些方法很简单，看名字就知道什么意思了，就不再解释了</span></span><br><span class="line">entity.addStringProperty(<span class="string">"test"</span>).codeBeforeSetter(<span class="string">""</span>).codeBeforeGetter(<span class="string">""</span>).codeBeforeGetterAndSetter(<span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>设置不同的属性名和数据库列名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置实体类名为 age，数据库列名为 _age</span></span><br><span class="line">entity.addStringProperty(<span class="string">"age"</span>).columnName(<span class="string">"_age"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>有些时候，我们会在生成的实体类中添加一些属性和方法，但是每次重新运行 Java 项目的时候都会覆盖掉以前的代码，如果不想覆盖自己添加的代码，可以这样设置：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schema.enableKeepSectionsByDefault(); <span class="comment">// 通过此 schema 创建的实体类都不会覆盖自定义的代码</span></span><br><span class="line">entity.setHasKeepSections(<span class="keyword">true</span>); <span class="comment">// 此实体类不会覆盖自定义的代码</span></span><br></pre></td></tr></table></figure>
<p>通过上述方法运行 Java 项目后，会在实体类中多出以下注释代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KEEP INCLUDES - put your custom includes here</span></span><br><span class="line">在这里添加自定义的引用</span><br><span class="line"><span class="comment">// KEEP INCLUDES END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// KEEP FIELDS - put your custom fields here</span></span><br><span class="line">在这里添加自定义属性</span><br><span class="line"><span class="comment">// KEEP FIELDS END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// KEEP METHODS - put your custom methods here</span></span><br><span class="line">在这里添加自定义的方法</span><br><span class="line"><span class="comment">// KEEP METHODS END</span></span><br></pre></td></tr></table></figure>
<p><em>注意：自定义的代码要写在注释中，并且注释代码不要修改</em></p>
<p>暂时就想到这么多，以后有可能会补充，下一篇博客会讲一下如何使用 GreenDao 实现数据库的多表关联，即一对一，一对多，多对多的关系</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ORM 框架之 GreenDao（一）基本使用]]></title>
      <url>http://yoursite.com/2016/05/09/ORM%E6%A1%86%E6%9E%B6%E4%B9%8BGreenDao/</url>
      <content type="html"><![CDATA[<p>GreenDao 是在 Android 开发中广泛使用的数据库框架，其优点是运行效率高，内存消耗少，性能佳（没有考证，网上说的😅）<br>其它一些常用的数据库框架有：</p>
<ul>
<li><a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external">LitePal</a></li>
<li><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">ActiveAndroid</a></li>
<li><a href="https://github.com/j256/ormlite-android" target="_blank" rel="external">OrmLite</a></li>
<li><a href="https://github.com/realm/realm-java" target="_blank" rel="external">realm</a></li>
</ul>
<p><em>目前还在更新中的有 <code>LitePal</code>，<code>realm</code>。本篇博客只讲 GreenDao 相关知识</em></p>
<a id="more"></a>
<p>首先附上 GreenDao 官网和 github 地址<br><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">GreenDao github</a><br><a href="http://greenrobot.org/greendao/" target="_blank" rel="external">GreenDao 官网</a></p>
<h2 id="如何使用-GreenDao"><a href="#如何使用-GreenDao" class="headerlink" title="如何使用 GreenDao"></a>如何使用 GreenDao</h2><h3 id="在-Android-工程中配置-GreenDao-Generater-模块"><a href="#在-Android-工程中配置-GreenDao-Generater-模块" class="headerlink" title="在 Android 工程中配置 GreenDao Generater 模块"></a>在 Android 工程中配置 GreenDao Generater 模块</h3><p>说白了就是配置 GreenDao 生成的代码块存放路径</p>
<ul>
<li>首先在 <code>src/main</code> 目录下新建与 <code>java</code> 同级的 <code>java-gen</code> 目录</li>
<li>在 <code>app</code> 的 <code>build.gradle</code> 中的 <code>android</code> 模块中添加如下代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">       main &#123;</span><br><span class="line">           java.srcDirs = [<span class="string">'src/main/java'</span>, <span class="string">'src/main/java-gen'</span>]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>并添加依赖 <code>compile ’org.greenrobot:greendao:2.2.0‘</code></p>
<h3 id="新建-GreenDao-Generator-模块（Java-工程）"><a href="#新建-GreenDao-Generator-模块（Java-工程）" class="headerlink" title="新建 GreenDao Generator 模块（Java 工程）"></a>新建 GreenDao Generator 模块（Java 工程）</h3><ul>
<li>新建一个 Java 工程，<code>File -&gt; New -&gt; New Module -&gt; Java Library</code></li>
</ul>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1462853881103.png" alt=""></p>
<ul>
<li>在新建的 Java 工程中的 <code>build.gradle</code> 中加入依赖 <code>compile ’org.greenrobot:greendao-generator:2.2.0‘</code></li>
<li><p>定义一个 <code>Schema</code>，<code>Schema schema = new Schema(1, &quot;com.sivan.greendaopractice&quot;);</code></p>
<ul>
<li>第一个参数为版本号</li>
<li>第二个参数为包名</li>
</ul>
</li>
<li><p>编写添加实体类的代码，如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个实体类对应一张数据库表，此处表名为 PERSON （即类名）</span></span><br><span class="line">Entity person = schema.addEntity(<span class="string">"Person"</span>);</span><br><span class="line"><span class="comment">// 也可以重新命名表名</span></span><br><span class="line"><span class="comment">// person.setTableName("People");</span></span><br><span class="line"><span class="comment">// 定义一个主键</span></span><br><span class="line">person.addIdProperty().primaryKey();</span><br><span class="line"><span class="comment">// 定义一个非空的列，列名为 NAME</span></span><br><span class="line">person.addStringProperty(<span class="string">"name"</span>).notNull();</span><br><span class="line"><span class="comment">// 可以使用此方法定义实体类的属性名和数据库的列名不同，如下实体类名为 sex，列名为_SEX</span></span><br><span class="line">person.addStringProperty(<span class="string">"sex"</span>).columnName(<span class="string">"_sex"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>最后生成实体类 <code>new DaoGenerator().generateAll(schema, &quot;../GreenDaoPractice/app/src/main/java-gen&quot;)</code><ul>
<li>第一个参数为 <code>schema</code></li>
<li>第二个参数为文件生成路径</li>
</ul>
</li>
</ul>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1462858757141.png" alt=""></p>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenDaoGenerate</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Schema schema = <span class="keyword">new</span> Schema(<span class="number">1</span>, <span class="string">"com.sivan.greendaopractice"</span>);</span><br><span class="line">		addPerson(schema);</span><br><span class="line">		<span class="keyword">new</span> DaoGenerator().generateAll(schema, <span class="string">"../GreenDaoPractice/app/src/main/java-gen"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Schema schema)</span> </span>&#123;</span><br><span class="line">		Entity person = schema.addEntity(<span class="string">"Person"</span>);</span><br><span class="line">		person.addIdProperty().primaryKey();</span><br><span class="line">		person.addStringProperty(<span class="string">"name"</span>).notNull();</span><br><span class="line">		person.addStringProperty(<span class="string">"sex"</span>).columnName(<span class="string">"_sex"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行 Java 工程</li>
</ul>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1462532614509.png" alt=""></p>
<p>如果出下下面的提示，表示成功了<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1462533231310.png" alt=""></p>
<ul>
<li>接下来看一下 Android 工程中的 <code>java-gen</code> 目录</li>
</ul>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1462859442071.png" alt=""></p>
<h3 id="在-Android-工程中进行数据库操作"><a href="#在-Android-工程中进行数据库操作" class="headerlink" title="在 Android 工程中进行数据库操作"></a>在 Android 工程中进行数据库操作</h3><p>接下来我们就可以对数据库进行 CRUD （增删改查）操作了<br>具体看代码，基本上都有注释了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">	<span class="meta">@BindView</span>(R.id.et_name)</span><br><span class="line">	EditText mEtName;</span><br><span class="line">	<span class="meta">@BindView</span>(R.id.et_sex)</span><br><span class="line">	EditText mEtSex;</span><br><span class="line">	<span class="meta">@BindView</span>(R.id.list_view)</span><br><span class="line">	ListView mListView;</span><br><span class="line">	<span class="meta">@BindView</span>(R.id.et_id)</span><br><span class="line">	EditText mEtId;</span><br><span class="line">	<span class="keyword">private</span> DaoMaster.DevOpenHelper mHelper;</span><br><span class="line">	<span class="keyword">private</span> SQLiteDatabase db;</span><br><span class="line">	<span class="keyword">private</span> DaoSession mDaoSession;</span><br><span class="line">	<span class="keyword">private</span> DaoMaster mDaoMaster;</span><br><span class="line">	<span class="keyword">private</span> PersonDao mPersonDao;</span><br><span class="line">	<span class="keyword">private</span> Cursor cursor;</span><br><span class="line">	<span class="keyword">private</span> SimpleCursorAdapter mCursorAdapter;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line">		ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 第一个参数为 context，第二个参数为数据库表名，第三个参数通常为 null</span></span><br><span class="line">		mHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, <span class="string">"test-db"</span>, <span class="keyword">null</span>);</span><br><span class="line">		db = mHelper.getWritableDatabase();</span><br><span class="line">		mDaoMaster = <span class="keyword">new</span> DaoMaster(db);</span><br><span class="line">		mDaoSession = mDaoMaster.newSession();</span><br><span class="line">		<span class="comment">// 得到 Dao 对象，数据库的 CRUD 操作都是通过此对象来进行</span></span><br><span class="line">		mPersonDao = mDaoSession.getPersonDao();</span><br><span class="line">		<span class="comment">// 遍历表中所有的数据</span></span><br><span class="line">		cursor = db.query(mPersonDao.getTablename(), mPersonDao.getAllColumns(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">		<span class="comment">// 通过 PersonDao 的静态内部类得到字段所对应的 列名</span></span><br><span class="line">		String[] from = &#123;PersonDao.Properties.Name.columnName, PersonDao.Properties.Sex.columnName&#125;;</span><br><span class="line">		<span class="keyword">int</span>[] to = &#123;android.R.id.text1, android.R.id.text2&#125;;</span><br><span class="line">		<span class="comment">// 使用 SimpleCursorAdapter 将数据库中的数据展示到 ListView 上</span></span><br><span class="line">		mCursorAdapter = <span class="keyword">new</span> SimpleCursorAdapter(<span class="keyword">this</span>, android.R.layout.simple_list_item_2, cursor, from, to, Adapter.NO_SELECTION);</span><br><span class="line">		mListView.setAdapter(mCursorAdapter);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过构建 QueryBuilder 来实现查询功能</span></span><br><span class="line">		QueryBuilder&lt;Person&gt; queryBuilder = mPersonDao.queryBuilder().where(PersonDao.Properties.Name.eq(name));</span><br><span class="line">		<span class="comment">// .list() 方法会返回实体类集合</span></span><br><span class="line">		List&lt;Person&gt; persons = queryBuilder.list();</span><br><span class="line">		<span class="comment">// 如果想得到唯一的结果，使用 .unique() 方法</span></span><br><span class="line">		<span class="comment">// Person person = queryBuilder.unique();</span></span><br><span class="line">		<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setMessage(persons != <span class="keyword">null</span> &amp;&amp; persons.size() &gt; <span class="number">0</span> ? persons.get(<span class="number">0</span>).getName() + <span class="string">"--&gt;"</span> + persons.get(<span class="number">0</span>).getSex() : <span class="string">"查无此数据"</span>).setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">null</span>).create().show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person(<span class="keyword">null</span>, name, sex);</span><br><span class="line">		<span class="comment">// 通过 insert 方法向数据库中添加数据，因为设置了 id 为主键，所以这里 id 填 null</span></span><br><span class="line">		mPersonDao.insert(person);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@OnClick</span>(&#123;R.id.btn_add, R.id.btn_search, R.id.btn_update, R.id.btn_delete&#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">		name = mEtName.getText().toString().trim();</span><br><span class="line">		sex = mEtSex.getText().toString().trim();</span><br><span class="line">		id = mEtId.getText().toString().trim();</span><br><span class="line">		<span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">				<span class="keyword">case</span> R.id.btn_add:</span><br><span class="line">					add();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> R.id.btn_search:</span><br><span class="line">					search();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> R.id.btn_update:</span><br><span class="line">					update();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> R.id.btn_delete:</span><br><span class="line">					delete();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Cursor cursor = db.query(mPersonDao.getTablename(), mPersonDao.getAllColumns(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">		<span class="comment">// 通过交换 cursor 来更新 UI</span></span><br><span class="line">		mCursorAdapter.swapCursor(cursor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过主键来删除数据</span></span><br><span class="line">		mPersonDao.deleteByKey(Long.valueOf(id));</span><br><span class="line">		<span class="comment">// 删除所有</span></span><br><span class="line">		<span class="comment">// mPersonDao.deleteAll();</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过 update 方法更新数据库中的数据</span></span><br><span class="line">		mPersonDao.update(<span class="keyword">new</span> Person(Long.valueOf(id), name, sex));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GreenDao 的基本使用就介绍这么多，下一篇博客中我会讲一下 GreenDao 的一些高级用法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio中 Gradle 依赖的统一管理]]></title>
      <url>http://yoursite.com/2016/04/26/AndroidStudio%E4%B8%ADGradle%E4%BE%9D%E8%B5%96%E7%9A%84%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="为什么要对-Gradle-统一管理"><a href="#为什么要对-Gradle-统一管理" class="headerlink" title="为什么要对 Gradle 统一管理"></a>为什么要对 Gradle 统一管理</h2><p>在实际项目中，经常会出现一个 Project 中有多个 Module 的情况，如果每个 Module 又同时拥有相同的依赖，比如 v4 包，那么，每次 v4 包升级的时候修改多个 Module 中的 build.gradle 文件，更新其版本都是一件麻烦的事情，而且很有可能忘记某个 Module。所以，将依赖进行统一管理，对于一个 Project 下拥有多个 Module 的情况来说是非常必要的。</p>
<a id="more"></a>
<h2 id="如何管理"><a href="#如何管理" class="headerlink" title="如何管理"></a>如何管理</h2><p>假设你的 Project 结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">  --module1</span><br><span class="line">    --build.gradle</span><br><span class="line">  --module2</span><br><span class="line">    --build.gradle</span><br><span class="line">  ...</span><br><span class="line">  --build.gradle</span><br></pre></td></tr></table></figure>
<h3 id="使用脚本-config-gradle"><a href="#使用脚本-config-gradle" class="headerlink" title="使用脚本 config.gradle"></a>使用脚本 config.gradle</h3><p>为了方便管理，可以在根目录下新建 config.gradle 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">  --module1</span><br><span class="line">    --build.gradle</span><br><span class="line">  --module2</span><br><span class="line">    --build.gradle</span><br><span class="line">  ...</span><br><span class="line">  --build.gradle</span><br><span class="line">  --config.gradle</span><br></pre></td></tr></table></figure>
<p>在 config.gradle 中添加如下代码（具体情况根据自己项目来定）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    android = [</span><br><span class="line">            compileSdkVersion: <span class="number">23</span>,</span><br><span class="line">            buildToolsVersion: <span class="string">"24.0.0 rc1"</span>,</span><br><span class="line">            applicationId    : <span class="string">"com.sivan.rxretrofitdemo"</span>,</span><br><span class="line">            minSdkVersion    : <span class="number">16</span>,</span><br><span class="line">            targetSdkVersion : <span class="number">23</span>,</span><br><span class="line">            versionCode      : <span class="number">1</span>,</span><br><span class="line">            versionName      : <span class="string">"1.0"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="string">"appcompat-v7"</span>       : <span class="string">"com.android.support:appcompat-v7:23.3.0"</span>,</span><br><span class="line">            <span class="string">"rxjava"</span>             : <span class="string">"io.reactivex:rxjava:1.1.3"</span>,</span><br><span class="line">            <span class="string">"rxandroid"</span>          : <span class="string">"io.reactivex:rxandroid:1.1.0"</span>,</span><br><span class="line">            <span class="string">"retrofit"</span>           : <span class="string">"com.squareup.retrofit2:retrofit:2.0.0-beta4"</span>,</span><br><span class="line">            <span class="string">"gson"</span>               : <span class="string">"com.google.code.gson:gson:2.6.2"</span>,</span><br><span class="line">            <span class="string">"converter-gson"</span>     : <span class="string">"com.squareup.retrofit2:converter-gson:2.0.0-beta4"</span>,</span><br><span class="line">            <span class="string">"adapter-rxjava"</span>     : <span class="string">"com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4"</span>,</span><br><span class="line">            <span class="string">"butterknife"</span>        : <span class="string">"com.jakewharton:butterknife:7.0.1"</span>,</span><br><span class="line">            <span class="string">"logging-interceptor"</span>: <span class="string">"com.squareup.okhttp3:logging-interceptor:3.0.1"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，依赖写完了，那如何在项目中使用呢</p>
<p>在 root 目录下的build.gradle 中加上<code>apply from: &quot;config.gradle&quot;</code></p>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461652028127.png" alt=""></p>
<p>接下来就剩下最后一步了，在需要添加依赖的 Module 中使用</p>
<ul>
<li>android 节点的使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.android.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.android.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId rootProject.ext.android.applicationId</span><br><span class="line">        minSdkVersion rootProject.ext.android.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.android.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.android.versionCode</span><br><span class="line">        versionName rootProject.ext.android.versionName</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>dependencies 节点的使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span><br><span class="line">    compile rootProject.ext.dependencies["appcompat-v7"]</span><br><span class="line">    compile rootProject.ext.dependencies["rxjava"]</span><br><span class="line">    compile rootProject.ext.dependencies["rxandroid"]</span><br><span class="line">    compile rootProject.ext.dependencies["gson"]</span><br><span class="line">    compile rootProject.ext.dependencies["converter-gson"]</span><br><span class="line">    compile rootProject.ext.dependencies["adapter-rxjava"]</span><br><span class="line">    compile rootProject.ext.dependencies["retrofit"]</span><br><span class="line">    compile rootProject.ext.dependencies["butterknife"]</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>以后再对依赖包升级的时候直接修改 config.gradle 文件就 OK 了</p>
<h3 id="使用配置文件-gradle-properties"><a href="#使用配置文件-gradle-properties" class="headerlink" title="使用配置文件 gradle.properties"></a>使用配置文件 gradle.properties</h3><p>对依赖进行统一管理的另一种方法是使用配置文件 gradle.properties（通常 IDE 会自动生成此文件），在此文件中添加键值对：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOGGING_INTERCEPTOR=com.squareup.okhttp3:logging-interceptor:3.0.1</span><br><span class="line">CARD_VIEW=com.android.support:cardview-v7:23.3.0</span><br></pre></td></tr></table></figure>
<p>在 Module 的 build.gradle 中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile LOGGING_INTERCEPTOR</span><br><span class="line">    compile CARD_VIEW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So easy！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客第一篇--科学上网]]></title>
      <url>http://yoursite.com/2016/04/23/%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>首先当了好久的程序猿竟然一篇博客都没有写过，说起来真是惭愧。究其原因，就是懒。但是每次写程序的时候遇到一些糢糊不清的知识点，就要去 Google 各种搜索（不要问我为什么不用百度），浪费了好多时间，于是便决定自己写博客，将平时学到的知识都整理到这里，也算是一个知识点的备份吧。</p>
<p>好了，废话不多说，进入本篇正题。</p>
<p><strong>注：本文测试环境为 Mac</strong></p>
<a id="more"></a>
<h2 id="关于科学上网"><a href="#关于科学上网" class="headerlink" title="关于科学上网"></a>关于科学上网</h2><p>天朝的网络对于开发人员来说就是一个噩梦，如果一个程序猿不会科学上网，那……</p>
<p>本篇课程就来告诉大家如何使用亚马逊 AWS 搭建 shadowsocks</p>
<p>先说一下 亚马逊 AWS 的缺点吧，网上有人反映说在免费期间内有莫名其妙的扣费情况，如果你对这个很在意的话，可以跳到本文最后，<strong>有！福！利！</strong></p>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="申请-AWS"><a href="#申请-AWS" class="headerlink" title="申请 AWS"></a>申请 AWS</h3><ol>
<li><p>打开 <a href="https://aws.amazon.com/cn/" target="_blank" rel="external">AWS官网</a> 点击<code>注册</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461383568654.png" alt=""><br>需要注意的是，填写个人信息的时候需要使用英文<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461377168429.png" alt=""></p>
</li>
<li><p>注册成功后，点击<code>登陆控制台</code></p>
</li>
</ol>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384026370.png" alt=""></p>
<h3 id="新建-EC2"><a href="#新建-EC2" class="headerlink" title="新建 EC2"></a>新建 EC2</h3><ol>
<li>进入 AWS 主页，选择 EC2<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461378693798.png" alt=""></li>
<li>右上角地区选择，点击<code>启动实例</code>（推荐选择东京）<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461378967179.png" alt=""></li>
<li>选择 <code>符合条件的免费套餐</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384350580.png" alt=""></li>
<li>同样选择 <code>符合条件的免费套餐</code>，点击<code>审核启动</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384398980.png" alt=""></li>
<li>点击<code>启动</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384437965.png" alt=""></li>
<li>选择 <code>创建新密钥对</code>，输入密钥名称，点击<code>下载密钥对</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384509576.png" alt=""></li>
<li>这样就布署好了一个在东京的服务器节点<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384595585.png" alt=""></li>
<li>点击查看实例，这里的一些信息我们接下来会用到<br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461384770073.png" alt=""></li>
</ol>
<h3 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h3><p>Windows 参考官方连接<a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html" target="_blank" rel="external">使用 PuTTY 从 Windows 连接到 Linux 实例</a></p>
<p>Mac 按照下面步骤进行</p>
<ol>
<li>首先，找到刚刚保存的密钥对文件（*.pem文件）本文假设此文件名为 ec2.pem</li>
<li>打开终端，进入到 ec2.pem 文件所在目录</li>
<li>执行<code>chmod 400 ec2.pem</code>修改文件权限</li>
<li>执行<code>ssh -i ec2.pem ubuntu@你的服务器公有 DNS</code>即可连上远程服务器（服务器公有DNS在实例中可以找到）</li>
</ol>
<h3 id="安装-shadowssocks-依赖"><a href="#安装-shadowssocks-依赖" class="headerlink" title="安装 shadowssocks 依赖"></a>安装 shadowssocks 依赖</h3><ol>
<li>终端输入 <code>sudo -s</code> 获取超级权限</li>
<li><code>apt-get update</code> 更新apt-get</li>
<li><code>apt-get install python-pip</code> 安装python包管理工具pip</li>
<li><code>pip install shadowsocks</code> 安装shadowsocks</li>
</ol>
<h3 id="配置-shadowsocks"><a href="#配置-shadowsocks" class="headerlink" title="配置 shadowsocks"></a>配置 shadowsocks</h3><ol>
<li>在 /etc/ 目录下新建 shadowsocks.json 文件<code>touch /etc/shadowsocks.json</code></li>
<li>使用 vim 编辑 shadowsocks 配置文件<code>sudo vi /etc/shadowsocks.json</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461386394277.png" alt=""></li>
<li>进入 vi 编辑模式后可以使用方向键或者<code>h,j,k,l</code>来移动光标，键入<code>i</code>来进入编辑模式，编辑结束后，按<code>Esc</code>退出编辑状态，键入<code>：</code>进入命令行模式，键入<code>wq</code>保存退出</li>
</ol>
<ul>
<li>单一端口配置：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>, <span class="comment">// 默认0.0.0.0就好</span></span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8080</span>, <span class="comment">// 自己定义，下面会用到</span></span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"密码"</span>, <span class="comment">// AWS 密码</span></span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多端口配置：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"port_password"</span>: &#123;</span><br><span class="line">        <span class="string">"端口1"</span>: <span class="string">"连接密码1"</span>,</span><br><span class="line">        <span class="string">"端口2"</span> : <span class="string">"连接密码2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开启-AWS-入站端口"><a href="#开启-AWS-入站端口" class="headerlink" title="开启 AWS 入站端口"></a>开启 AWS 入站端口</h3><p>配置好 shadowsocks 后，还需要将配置中的端口打开，这样客户端才可以连接到 EC2 中的 shadowsocks 服务</p>
<ol>
<li>首先打开运行中的实例，向右滚动窗口，找到<code>安全组</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461387172357.png" alt=""></li>
<li>点击<code>操作</code>，<code>编辑入站规则</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461387217532.png" alt=""></li>
<li>点击<code>添加规则</code>，<code>端口范围</code>填写 shadowscoks 配置文件中的端口号，点击<code>保存</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461387370564.png" alt=""></li>
</ol>
<h3 id="启动-shadowsocks-服务"><a href="#启动-shadowsocks-服务" class="headerlink" title="启动 shadowsocks 服务"></a>启动 shadowsocks 服务</h3><p>终端输入<code>ssserver -c /etc/shadowsocks.json -d start</code>即可</p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>Mac 下载 shadowsocks 客户端，下载连接</p>
<p><a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">Shadowsocks for OSX</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载安装后，会看到一个纸飞机一样的图标</p>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461388151752.png" alt=""></p>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461388237105.png" alt=""></p>
<p>点击<code>服务器</code>，<code>打开服务器设定</code></p>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461392923249.png" alt=""></p>
<p>地址填写实例中的<code>公有 IP</code>，端口填写 shadowsocks 配置文件中的端口号，加密方式<code>aes-256-cfb</code>，密码为 AWS 登陆密码，点击<code>确定</code></p>
<p>最后，点击纸飞机图标，打开 shadowsocks，选择自动代理模式。</p>
<p>打开浏览器，输入<a href="https://www.google.com.hk/" target="_blank" rel="external">谷歌</a></p>
<p><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461388570423.png" alt=""></p>
<p>是不是很激动，又可以学（zhuang）习（bi）了。</p>
<h2 id="订单检控"><a href="#订单检控" class="headerlink" title="订单检控"></a>订单检控</h2><p><strong>重要的事情忘记跟大家说了，亚马逊 AWS 每个月提供 15GB 免费流量与 750小时免费时长。如果超过免费限制是会自动从绑定的信用卡中扣除的，所以，需要注意自己的使用情况。创建一个账单警报，当卡中有扣费发生时，会收到扣费邮件的提醒。</strong></p>
<ol>
<li>进入 AWS 主页，点击<code>我的帐户</code>，<code>帐户设置</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461391380019.png" alt=""></li>
<li>点击<code>首选项</code>，<code>接收账单警报</code>，<code>保存首选项</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461391554180.png" alt=""></li>
<li>点击左上角的<code>服务</code>，<code>账单</code><br><img src="http://7xrk97.com1.z0.glb.clouddn.com/markdown/1461391576682.png" alt=""></li>
<li>点击<code>设置第一个账单警报</code>，并按照步骤进行，填写一个可以随时收到邮件的邮箱就 OK 了。</li>
</ol>
<h2 id="Other-Thing"><a href="#Other-Thing" class="headerlink" title="Other Thing"></a>Other Thing</h2><p>也许有人觉得上面的设置神马的太麻烦了，又要面临随时被扣费的风险，那么，大杀器来了！！！</p>
<p><a href="https://github.com/getlantern/lantern-binaries" target="_blank" rel="external"><strong>Lantern</strong></a></p>
<p>谷歌出品，万全免费，用的人都说好。你还在等什么。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>第一次写博客，有什么缺点希望大家能够提醒一下，thx！（不服来打我呀😏）</p>
<p>参考：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000003101075" target="_blank" rel="external">科学上网之EC2搭建shadowsocks</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
